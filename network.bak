#lang racket
(define-struct node (name timeout timeout-arc arcs) #:transparent #:mutable)
(define-struct arc (name trigger actions destination) #:transparent)

(define logging display)
(define narrate display)
(define h1 "H1")
(define h3 "H3")
(define no-arcs '(()))

(define-syntax (define-arc stx)
  (syntax-case stx (do: to:)
    [(_ name trigger do: (actions ...) to: destination)
     #'(make-arc name trigger (lambda () actions ...) destination)]))
       

(define-syntax (define-node stx)
  (syntax-case stx (timeout: timeout-arc: rest:)
    [(_ name timeout: t timeout-arc: arc rest: rest)
     #'(make-node name t (define-arc arc) rest)]))


(define s1 (node "s1" 10 #f  no-arcs))
(define end-states '("s1"))


;(define-arc s1-node-a1 'trigger do: ((logging "s1 timed out") (db-set! 'bp 80) (narrate h2)) s1)
;(set-arcs! init-node timeout: a1 rest: a2)(define current-node init-node)

(define-arc
    'timeout
    #f
    do: ((logging "test") (narrate h3)) to: s1)

(define-node 'init
  timeout: 5
  timeout-arc:  timeout
                 #f
                 do: ((logging "test") (narrate h3)) to: s1
  rest: no-arcs)
                     
;(define-arc
;'a2
;'history
;do: ((logging "trigger = history from init") (narrate h3))
;to: s1)))